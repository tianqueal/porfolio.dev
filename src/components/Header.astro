---
import { DEFAULT_LANG, type Language } from '@/i18n/languages';
import ContactLink from './ContactLink.astro';
import HeaderLink from './HeaderLink.astro';
import LanguageToggle from './LanguageToggle.astro';
import ThemeToggle from './ThemeToggle.astro';
import { useT } from '@/i18n/utils';
import { author } from 'package.json';

const lang = (Astro.currentLocale as Language) || DEFAULT_LANG;
const t = useT(lang);

const navItems = [
	{
		title: t('HEADER.experience.title'),
		label: t('HEADER.experience.label'),
		url: `/${lang}#experience`,
	},
	{
		title: t('HEADER.projects.title'),
		label: t('HEADER.projects.label'),
		url: `/${lang}#projects`,
	},
	{
		title: t('HEADER.about_me.title'),
		label: t('HEADER.about_me.label'),
		url: `/${lang}#about-me`,
	},
];

const contactLink = {
	title: t('HEADER.contact.title'),
	label: t('HEADER.contact.label'),
	url: `mailto:${author.email}`,
};
---

<header class="fixed top-0 z-10 mx-auto mt-2 flex w-full items-center justify-center">
	<nav
		class="flex items-center justify-center rounded-full px-3 text-sm font-medium text-gray-600 dark:text-gray-200"
	>
		{navItems.map((link) => <HeaderLink {...link} />)}
		<ContactLink {...contactLink} />
		<ThemeToggle />
		<LanguageToggle />
	</nav>
</header>

<script>
	document.addEventListener('astro:page-load', () => {
		const sections = document.querySelectorAll('section');
		const navItems = document.querySelectorAll('header nav a');

		const callback = (entries: Array<IntersectionObserverEntry>) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					navItems.forEach((item) => {
						if (item.getAttribute('aria-label') == entry.target.id) {
							item.classList.add('text-blue-500');
						} else {
							item.classList.remove('text-blue-500');
						}
					});
				}
			});
		};

		const observer = new IntersectionObserver(callback, {
			root: null,
			rootMargin: '0px',
			threshold: 0.3,
		});

		sections.forEach((section) => {
			observer.observe(section);
		});

		// Cleanup function
		document.onvisibilitychange = () => {
			if (document.visibilityState === 'hidden') {
				observer.disconnect();
			} else {
				sections.forEach((section) => {
					observer.observe(section);
				});
			}
		};
	});
</script>

<style>
	nav {
		animation: nav-shadown 1s linear both;
		animation-timeline: scroll();
		animation-range: 0 100px;
	}

	nav {
		@apply bg-white/50 dark:bg-gray-800/90;
	}

	@keyframes nav-shadown {
		0% {
			@apply bg-white/0 dark:bg-gray-800/0;
		}
		to {
			@apply shadow-lg ring-1 ring-white/10 backdrop-blur;
		}
	}
</style>
