---
import SunIconIcon from './icons/SunIcon.astro';
import MoonIcon from './icons/MoonIcon.astro';
import SystemIconIcon from './icons/SystemIcon.astro';
import { DEFAULT_LANG, type Language } from '@/i18n/languages';
import { useT } from '@/i18n/utils';

const lang = Astro.currentLocale as Language;
const t = useT(lang || DEFAULT_LANG);

const THEMES = [
	{
		id: 'light',
		label: t('THEME.light'),
	},
	{
		id: 'dark',
		label: t('THEME.dark'),
	},
	{
		id: 'system',
		label: t('THEME.system'),
	},
];
---

<div class="relative ml-1 mr-1">
	<button
		transition:persist
		id="theme-toggle-btn"
		class="flex appearance-none border-none transition hover:scale-125"
	>
		<span class="sr-only">{t('THEME.label')}</span>
		<SunIconIcon id="light" class="theme-toggle-icon size-5 transition-all" />
		<MoonIcon id="dark" class="theme-toggle-icon absolute size-5 transition-all" />
		<SystemIconIcon id="system" class="theme-toggle-icon absolute size-5 transition-all" />
	</button>
	<div
		id="themes-menu"
		class="scale-80 absolute right-0 top-8 hidden min-w-[8rem] rounded-md border border-gray-100 bg-white/90 p-1 text-sm shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md dark:border-gray-500/20 dark:bg-gray-900/90"
	>
		<ul>
			{
				THEMES.map((theme) => (
					<li>
						<button
							class="themes-menu-option w-full cursor-pointer rounded-sm px-2 py-1.5 text-left hover:bg-neutral-400/40 dark:hover:bg-gray-500/50"
							data-theme-id={theme.id}
						>
							{theme.label}
						</button>
					</li>
				))
			}
		</ul>
	</div>
</div>

<style>
	#themes-menu.open {
		display: inline;
		animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.8);
			opacity: 0;
		}

		to {
			transform: scale(1);
			opacity: 1;
		}
	}
</style>

<script is:inline>
	let remove = null;
	const getThemesMenu = () => document.getElementById('themes-menu');
	const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');

	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined') {
			return localStorage.getItem('theme') ?? 'system';
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};

	const updateIcon = (themePreference) => {
		document.querySelectorAll('.theme-toggle-icon').forEach((element) => {
			element.style.scale = element.id === themePreference ? '1' : '0';
		});
	};

	const updateTheme = () => {
		if (remove != null) {
			remove();
		}
		matchMedia.addEventListener('change', updateTheme);
		remove = () => {
			matchMedia.removeEventListener('change', updateTheme);
		};

		const themePreference = getThemePreference();
		const isDark =
			themePreference === 'dark' || (themePreference === 'system' && matchMedia.matches);

		updateIcon(themePreference);
		document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
	};

	const initializeThemeMenu = () => {
		const themesMenu = getThemesMenu();
		if (!themesMenu) return;

		document.addEventListener('click', () => themesMenu.classList.remove('open'));

		const toggleBtn = document.getElementById('theme-toggle-btn');
		if (toggleBtn) {
			toggleBtn.addEventListener('click', (e) => {
				e.stopPropagation();
				document.getElementById('languages-menu')?.classList.remove('open');
				const isClosed = !themesMenu.classList.contains('open');
				themesMenu.classList[isClosed ? 'add' : 'remove']('open');
			});
		}

		document.querySelectorAll('.themes-menu-option').forEach((element) => {
			element.addEventListener('click', (e) => {
				localStorage.setItem('theme', e.target.dataset.themeId);
				updateTheme();
				themesMenu.classList.remove('open');
			});
		});
	};

	updateTheme();
	initializeThemeMenu();

	document.addEventListener('astro:after-swap', () => {
		updateTheme();
		initializeThemeMenu();
		window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
	});
</script>
