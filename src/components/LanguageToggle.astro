---
import LanguageIcon from './icons/LanguageIcon.astro';
import { Language, LANGUAGES, type LanguageData, DEFAULT_LANG } from '@/i18n/languages';
import { useT } from '@/i18n/utils';

const languages = Object.entries(LANGUAGES) as Array<[Language, LanguageData]>;
const lang = Astro.currentLocale as Language;
const t = useT(lang || DEFAULT_LANG);
---

<div class="relative ml-1 mr-1">
	<button
		transition:persist
		id="languages-toggle-btn"
		class="flex appearance-none border-none transition hover:scale-125"
		aria-expanded="false"
		aria-haspopup="true"
		aria-controls="languages-menu"
	>
		<span class="sr-only">{t('LANGUAGE.label')}</span>
		<LanguageIcon id="language" class="language-toggle-icon size-5 transition-all" />
	</button>
	<div
		transition:persist
		id="languages-menu"
		class="scale-80 absolute right-0 top-8 hidden min-w-[8rem] rounded-md border border-gray-100 bg-white/90 p-1 text-sm shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md dark:border-gray-500/20 dark:bg-gray-900/90"
		role="menu"
		aria-label={t('LANGUAGE.label')}
	>
		<ul>
			{
				languages.map(([lang, langData]) => (
					<li role="none">
						<a
							href={`/${lang}/`}
							title={langData.label}
							aria-label={langData.label}
							class="language-menu-item block w-full rounded-sm px-2 py-1.5 hover:bg-neutral-400/40 dark:hover:bg-gray-500/50"
							role="menuitem"
						>
							{langData.label}
						</a>
					</li>
				))
			}
		</ul>
	</div>
</div>

<style>
	#languages-menu.open {
		display: inline;
		animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.8);
			opacity: 0;
		}

		to {
			transform: scale(1);
			opacity: 1;
		}
	}
</style>

<script>
	import { AccessibleDropdownMenu, type DropdownMenuConfig } from '@/utils';

	let languageDropdown: AccessibleDropdownMenu;

	const initializeLanguageToggle = () => {
		languageDropdown?.cleanup();

		const config: DropdownMenuConfig = {
			buttonId: 'languages-toggle-btn',
			menuId: 'languages-menu',
			itemSelector: '.language-menu-item',
			activeClasses: ['bg-neutral-400/40', 'dark:bg-gray-500/50'],
			siblingMenuId: 'themes-menu',
			onItemClick: () => {},
		};

		languageDropdown = new AccessibleDropdownMenu(config);
		languageDropdown.init();
	};

	initializeLanguageToggle();
	document.addEventListener('astro:after-swap', initializeLanguageToggle);
</script>
